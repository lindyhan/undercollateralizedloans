{
  "address": "0x29C1e56b81dC39b642feBeC73AaCE2B4145cd1df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdEToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aavePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethenaStaking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "aavePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_usdEAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_permitV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_permitR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_permitS",
          "type": "bytes32"
        }
      ],
      "name": "depositToAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethenaStaking",
      "outputs": [
        {
          "internalType": "contract IEthenaStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_usdEAmount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdEToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcTokenPermit",
      "outputs": [
        {
          "internalType": "contract IERC20Permit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdEAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sUsdEAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aEthUsdcAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1c9e3be259c460369e90ec7821a84fa54adbd32cd15a9e75f8f9f1a95c500b8",
  "receipt": {
    "to": null,
    "from": "0xd219C8b54832d6ca7d933a42d51F8bDC3Ee4370B",
    "contractAddress": "0x29C1e56b81dC39b642feBeC73AaCE2B4145cd1df",
    "transactionIndex": 32,
    "gasUsed": "800559",
    "logsBloom": "0x
    "blockHash": "0x9d72d765d3772cc302d60cb34cb7483a16e9755e9612c611125789afe3b7c006",
    "transactionHash": "0xf1c9e3be259c460369e90ec7821a84fa54adbd32cd15a9e75f8f9f1a95c500b8",
    "logs": [],
    "blockNumber": 7162570,
    "cumulativeGasUsed": "3243469",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf805ce4F96e0EdD6f0b6cd4be22B34b92373d696",
    "0x94a9D9AC8a22534E3FaCa9F4e7F2E2cf85d5E4C8",
    "0x16dA4541aD1807f4443d92D26044C1147406EB80",
    "0x1B6877c6Dac4b6De4c5817925DC40E2BfdAFc01b",
    "0xd219C8b54832d6ca7d933a42d51F8bDC3Ee4370B"
  ],
  "numDeployments": 3,
  "solcInputHash": "27fa76034f8bee2b1fdc8d464713e8a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdEToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aavePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethenaStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"aavePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_permitS\",\"type\":\"bytes32\"}],\"name\":\"depositToAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethenaStaking\",\"outputs\":[{\"internalType\":\"contract IEthenaStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdEAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdEToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcTokenPermit\",\"outputs\":[{\"internalType\":\"contract IERC20Permit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sUsdEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aEthUsdcAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Loan_.sol\":\"Loan\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\"},\"contracts/Loan_.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEthenaStaking {\\n    function stake(address user, uint256 amount) external returns (uint256 sUSDeAmount);\\n}\\n\\ncontract Loan {\\n    IERC20Permit public usdcTokenPermit;  // For permit functionality\\n    IERC20 public usdcToken;  // For balanceOf function\\n    IERC20 public usdEToken;\\n    address public aavePool;  // Just the address, no need for IPool interface\\n    IEthenaStaking public ethenaStaking;\\n\\n    address public deployer;\\n\\n    struct UserDeposit {\\n        uint256 usdEAmount;\\n        uint256 sUsdEAmount;\\n        uint256 usdcAmount;\\n        uint256 aEthUsdcAmount;\\n    }\\n\\n    mapping(address => UserDeposit) public userDeposits;\\n\\n    constructor(address _usdEToken, address _usdcToken, address _aavePool, address _ethenaStaking, address _deployer) {\\n        usdEToken = IERC20(_usdEToken);\\n        usdcTokenPermit = IERC20Permit(_usdcToken);  // IERC20Permit for permit functionality\\n        usdcToken = IERC20(_usdcToken);  // IERC20 for balanceOf functionality\\n        aavePool = _aavePool;  // Just store the address\\n        ethenaStaking = IEthenaStaking(_ethenaStaking);\\n        deployer = _deployer;\\n    }\\n\\n    function approve(uint256 _amount) external {\\n        // Approve the Ethena staking contract to spend the specified amount of USDe on behalf of the client\\n        usdEToken.transferFrom(msg.sender, address(ethenaStaking), _amount);\\n    }\\n\\n    function stake(uint256 _usdEAmount) external {\\n        // Ensure that the sender has approved the USDe tokens\\n        require(usdEToken.allowance(msg.sender, address(ethenaStaking)) >= _usdEAmount, \\\"Approval not sufficient\\\");\\n\\n        // Send USDe to Ethena staking contract\\n        usdEToken.transferFrom(msg.sender, address(ethenaStaking), _usdEAmount);\\n\\n        // Stake the USDe and receive sUSDe\\n        uint256 sUsdEAmount = ethenaStaking.stake(address(this), _usdEAmount);\\n\\n        // Map the transaction values to the user's wallet\\n        userDeposits[msg.sender].usdEAmount = _usdEAmount;\\n        userDeposits[msg.sender].sUsdEAmount = sUsdEAmount;\\n    }\\n\\n    function depositToAave(uint256 _usdEAmount, uint256 _leverage, uint256 _deadline, uint8 _permitV, bytes32 _permitR, bytes32 _permitS) external {\\n        // Ensure that only the deployer wallet can call this function\\n        require(msg.sender == deployer, \\\"Only deployer can call this function\\\");\\n\\n        // Calculate the USDC amount (USD * leverage)\\n        uint256 usdcAmount = _usdEAmount * _leverage;\\n\\n        // Approve Aave pool to spend USDC from the deployer using the permit function\\n        usdcTokenPermit.permit(address(this), aavePool, usdcAmount, _deadline, _permitV, _permitR, _permitS);\\n\\n        // Deposit USDC into Aave pool (Aave will return aEthUSDC)\\n        (bool success, ) = aavePool.call{value: usdcAmount}(abi.encodeWithSignature(\\\"supply(address,uint256,address,uint16)\\\", usdcToken, usdcAmount, address(this), 0));\\n\\n        require(success, \\\"Aave supply failed\\\");\\n\\n        // Receive the corresponding aEthUSDC tokens\\n        uint256 aEthUsdcAmount = usdcToken.balanceOf(address(this));  // Correctly use IERC20 for balanceOf\\n\\n        // Store the deposit data (aEthUSDC amount) in the contract\\n        userDeposits[msg.sender].usdcAmount = usdcAmount;\\n        userDeposits[msg.sender].aEthUsdcAmount = aEthUsdcAmount;\\n    }\\n\\n    function closeLoan() external {\\n        UserDeposit storage userDeposit = userDeposits[msg.sender];\\n\\n        // 1. Unstake sUSDe and get back USDe\\n        ethenaStaking.stake(msg.sender, userDeposit.sUsdEAmount);\\n\\n        // 2. Withdraw aEthUSDC from Aave\\n        (bool success, ) = aavePool.call{value: userDeposit.aEthUsdcAmount}(abi.encodeWithSignature(\\\"withdraw(address,uint256,address)\\\", usdcToken, userDeposit.aEthUsdcAmount, address(this)));\\n\\n        require(success, \\\"Aave withdraw failed\\\");\\n\\n        // 3. Calculate the excess USDC (after interest)\\n        uint256 withdrawnUSDC = usdcToken.balanceOf(address(this));\\n        uint256 excessUSDC = withdrawnUSDC - userDeposit.usdcAmount;\\n\\n        // 4. Send excess USDC back to the user\\n        usdcToken.transfer(msg.sender, excessUSDC);\\n\\n        // Remove user deposit record\\n        delete userDeposits[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0x810305d106e42625a6bb2c162ddb29be85359cf26ac8173e409daa6b61e024f6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c2a380380610c2a83398101604081905261002f916100b7565b600280546001600160a01b039687166001600160a01b03199182161790915560008054958716958216861790556001805482169095179094556003805493861693851693909317909255600480549185169184169190911790556005805491909316911617905561011c565b80516001600160a01b03811681146100b257600080fd5b919050565b600080600080600060a086880312156100cf57600080fd5b6100d88661009b565b94506100e66020870161009b565b93506100f46040870161009b565b92506101026060870161009b565b91506101106080870161009b565b90509295509295909350565b610aff8061012b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063938b672211610071578063938b672214610163578063a03e4bc314610176578063a694fc3a14610189578063b759f9541461019c578063d5f39488146101af578063efd821b5146101c257600080fd5b80630ba36dcd146100ae57806311eac85514610108578063232fa733146101335780637ca39c401461013d57806382f6254714610150575b600080fd5b6100e36100bc366004610977565b60066020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b60015461011b906001600160a01b031681565b6040516001600160a01b0390911681526020016100ff565b61013b6101d5565b005b61013b61014b3660046109a7565b61047f565b60025461011b906001600160a01b031681565b60005461011b906001600160a01b031681565b60035461011b906001600160a01b031681565b61013b610197366004610a00565b61070b565b61013b6101aa366004610a00565b6108f0565b60055461011b906001600160a01b031681565b60045461011b906001600160a01b031681565b336000818152600660205260409081902060048054600183015493516356e4bb9760e11b8152918201949094526024810192909252916001600160a01b03169063adc9772e906044016020604051808303816000875af115801561023d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102619190610a19565b5060038054908201546001546040516001600160a01b0391821660248201526044810183905230606482015260009391909116919060840160408051601f198184030181529181526020820180516001600160e01b0316631a4ca37b60e21b179052516102ce9190610a32565b60006040518083038185875af1925050503d806000811461030b576040519150601f19603f3d011682016040523d82523d6000602084013e610310565b606091505b505090508061035d5760405162461bcd60e51b815260206004820152601460248201527310585d99481dda5d1a191c985dc819985a5b195960621b60448201526064015b60405180910390fd5b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156103a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ca9190610a19565b905060008360020154826103de9190610a77565b60015460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104549190610a90565b5050336000908152600660205260408120818155600181018290556002810182905560030155505050565b6005546001600160a01b031633146104e55760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206465706c6f7965722063616e2063616c6c20746869732066756e636044820152633a34b7b760e11b6064820152608401610354565b60006104f18688610ab2565b60005460035460405163d505accf60e01b81523060048201526001600160a01b039182166024820152604481018490526064810189905260ff8816608482015260a4810187905260c48101869052929350169063d505accf9060e401600060405180830381600087803b15801561056757600080fd5b505af115801561057b573d6000803e3d6000fd5b50506003546001546040516001600160a01b03918216602482015260448101869052306064820152600060848201819052945091169150839060a40160408051601f198184030181529181526020820180516001600160e01b031663617ba03760e01b179052516105ec9190610a32565b60006040518083038185875af1925050503d8060008114610629576040519150601f19603f3d011682016040523d82523d6000602084013e61062e565b606091505b50509050806106745760405162461bcd60e51b815260206004820152601260248201527110585d99481cdd5c1c1b1e4819985a5b195960721b6044820152606401610354565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e19190610a19565b33600090815260066020526040902060028101949094556003909301929092555050505050505050565b60025460048054604051636eb1769f60e11b815233928101929092526001600160a01b0390811660248301528392169063dd62ed3e90604401602060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190610a19565b10156107d35760405162461bcd60e51b815260206004820152601760248201527f417070726f76616c206e6f742073756666696369656e740000000000000000006044820152606401610354565b600254600480546040516323b872dd60e01b815233928101929092526001600160a01b03908116602483015260448201849052909116906323b872dd906064016020604051808303816000875af1158015610832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108569190610a90565b50600480546040516356e4bb9760e11b81523092810192909252602482018390526000916001600160a01b039091169063adc9772e906044016020604051808303816000875af11580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d29190610a19565b33600090815260066020526040902092835560019092019190915550565b600254600480546040516323b872dd60e01b815233928101929092526001600160a01b03908116602483015260448201849052909116906323b872dd906064016020604051808303816000875af115801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190610a90565b5050565b60006020828403121561098957600080fd5b81356001600160a01b03811681146109a057600080fd5b9392505050565b60008060008060008060c087890312156109c057600080fd5b863595506020870135945060408701359350606087013560ff811681146109e657600080fd5b9598949750929560808101359460a0909101359350915050565b600060208284031215610a1257600080fd5b5035919050565b600060208284031215610a2b57600080fd5b5051919050565b6000825160005b81811015610a535760208186018101518583015201610a39565b506000920191825250919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a8a57610a8a610a61565b92915050565b600060208284031215610aa257600080fd5b815180151581146109a057600080fd5b8082028115828204841417610a8a57610a8a610a6156fea264697066735822122068853f160040bfe5697954bb8ef1cb3a1d4d5b089d844a250be62b170f9020fa64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063938b672211610071578063938b672214610163578063a03e4bc314610176578063a694fc3a14610189578063b759f9541461019c578063d5f39488146101af578063efd821b5146101c257600080fd5b80630ba36dcd146100ae57806311eac85514610108578063232fa733146101335780637ca39c401461013d57806382f6254714610150575b600080fd5b6100e36100bc366004610977565b60066020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b60015461011b906001600160a01b031681565b6040516001600160a01b0390911681526020016100ff565b61013b6101d5565b005b61013b61014b3660046109a7565b61047f565b60025461011b906001600160a01b031681565b60005461011b906001600160a01b031681565b60035461011b906001600160a01b031681565b61013b610197366004610a00565b61070b565b61013b6101aa366004610a00565b6108f0565b60055461011b906001600160a01b031681565b60045461011b906001600160a01b031681565b336000818152600660205260409081902060048054600183015493516356e4bb9760e11b8152918201949094526024810192909252916001600160a01b03169063adc9772e906044016020604051808303816000875af115801561023d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102619190610a19565b5060038054908201546001546040516001600160a01b0391821660248201526044810183905230606482015260009391909116919060840160408051601f198184030181529181526020820180516001600160e01b0316631a4ca37b60e21b179052516102ce9190610a32565b60006040518083038185875af1925050503d806000811461030b576040519150601f19603f3d011682016040523d82523d6000602084013e610310565b606091505b505090508061035d5760405162461bcd60e51b815260206004820152601460248201527310585d99481dda5d1a191c985dc819985a5b195960621b60448201526064015b60405180910390fd5b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156103a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ca9190610a19565b905060008360020154826103de9190610a77565b60015460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104549190610a90565b5050336000908152600660205260408120818155600181018290556002810182905560030155505050565b6005546001600160a01b031633146104e55760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206465706c6f7965722063616e2063616c6c20746869732066756e636044820152633a34b7b760e11b6064820152608401610354565b60006104f18688610ab2565b60005460035460405163d505accf60e01b81523060048201526001600160a01b039182166024820152604481018490526064810189905260ff8816608482015260a4810187905260c48101869052929350169063d505accf9060e401600060405180830381600087803b15801561056757600080fd5b505af115801561057b573d6000803e3d6000fd5b50506003546001546040516001600160a01b03918216602482015260448101869052306064820152600060848201819052945091169150839060a40160408051601f198184030181529181526020820180516001600160e01b031663617ba03760e01b179052516105ec9190610a32565b60006040518083038185875af1925050503d8060008114610629576040519150601f19603f3d011682016040523d82523d6000602084013e61062e565b606091505b50509050806106745760405162461bcd60e51b815260206004820152601260248201527110585d99481cdd5c1c1b1e4819985a5b195960721b6044820152606401610354565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e19190610a19565b33600090815260066020526040902060028101949094556003909301929092555050505050505050565b60025460048054604051636eb1769f60e11b815233928101929092526001600160a01b0390811660248301528392169063dd62ed3e90604401602060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190610a19565b10156107d35760405162461bcd60e51b815260206004820152601760248201527f417070726f76616c206e6f742073756666696369656e740000000000000000006044820152606401610354565b600254600480546040516323b872dd60e01b815233928101929092526001600160a01b03908116602483015260448201849052909116906323b872dd906064016020604051808303816000875af1158015610832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108569190610a90565b50600480546040516356e4bb9760e11b81523092810192909252602482018390526000916001600160a01b039091169063adc9772e906044016020604051808303816000875af11580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d29190610a19565b33600090815260066020526040902092835560019092019190915550565b600254600480546040516323b872dd60e01b815233928101929092526001600160a01b03908116602483015260448201849052909116906323b872dd906064016020604051808303816000875af115801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190610a90565b5050565b60006020828403121561098957600080fd5b81356001600160a01b03811681146109a057600080fd5b9392505050565b60008060008060008060c087890312156109c057600080fd5b863595506020870135945060408701359350606087013560ff811681146109e657600080fd5b9598949750929560808101359460a0909101359350915050565b600060208284031215610a1257600080fd5b5035919050565b600060208284031215610a2b57600080fd5b5051919050565b6000825160005b81811015610a535760208186018101518583015201610a39565b506000920191825250919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a8a57610a8a610a61565b92915050565b600060208284031215610aa257600080fd5b815180151581146109a057600080fd5b8082028115828204841417610a8a57610a8a610a6156fea264697066735822122068853f160040bfe5697954bb8ef1cb3a1d4d5b089d844a250be62b170f9020fa64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Loan_.sol:Loan",
        "label": "usdcTokenPermit",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20Permit)113"
      },
      {
        "astId": 133,
        "contract": "contracts/Loan_.sol:Loan",
        "label": "usdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 136,
        "contract": "contracts/Loan_.sol:Loan",
        "label": "usdEToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 138,
        "contract": "contracts/Loan_.sol:Loan",
        "label": "aavePool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 141,
        "contract": "contracts/Loan_.sol:Loan",
        "label": "ethenaStaking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IEthenaStaking)127"
      },
      {
        "astId": 143,
        "contract": "contracts/Loan_.sol:Loan",
        "label": "deployer",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 157,
        "contract": "contracts/Loan_.sol:Loan",
        "label": "userDeposits",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(UserDeposit)152_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Permit)113": {
        "encoding": "inplace",
        "label": "contract IERC20Permit",
        "numberOfBytes": "20"
      },
      "t_contract(IEthenaStaking)127": {
        "encoding": "inplace",
        "label": "contract IEthenaStaking",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserDeposit)152_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Loan.UserDeposit)",
        "numberOfBytes": "32",
        "value": "t_struct(UserDeposit)152_storage"
      },
      "t_struct(UserDeposit)152_storage": {
        "encoding": "inplace",
        "label": "struct Loan.UserDeposit",
        "members": [
          {
            "astId": 145,
            "contract": "contracts/Loan_.sol:Loan",
            "label": "usdEAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 147,
            "contract": "contracts/Loan_.sol:Loan",
            "label": "sUsdEAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 149,
            "contract": "contracts/Loan_.sol:Loan",
            "label": "usdcAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 151,
            "contract": "contracts/Loan_.sol:Loan",
            "label": "aEthUsdcAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}